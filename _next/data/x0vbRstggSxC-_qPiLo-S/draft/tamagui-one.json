{"pageProps":{"frontmatter":{"title":"Tamagui 1.0","publishedAt":"2021-09-22","description":"A better base layer for building cross-platform apps","by":"nate","slug":"tamagui-one","readingTime":{"text":"8 min read","minutes":7.705,"time":462300,"words":1541}},"code":"var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(t,i)=>()=>(i||t((i={exports:{}}).exports,i),i.exports),w=(t,i)=>{for(var o in i)a(t,o,{get:i[o],enumerable:!0})},h=(t,i,o,n)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let r of u(i))!f.call(t,r)&&r!==o&&a(t,r,{get:()=>i[r],enumerable:!(n=m(i,r))||n.enumerable});return t};var b=(t,i,o)=>(o=t!=null?p(g(t)):{},h(i||!t||!t.__esModule?a(o,\"default\",{value:t,enumerable:!0}):o,t)),v=t=>h(a({},\"__esModule\",{value:!0}),t);var c=y((W,d)=>{d.exports=_jsx_runtime});var S={};w(S,{default:()=>x,frontmatter:()=>k});var e=b(c()),k={title:\"Tamagui 1.0\",publishedAt:\"2021-09-22\",description:\"A better base layer for building cross-platform apps\",by:\"nate\"};function T(t={}){let{wrapper:i}=t.components||{};return i?(0,e.jsx)(i,Object.assign({},t,{children:(0,e.jsx)(o,{})})):o();function o(){let n=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",a:\"a\",hr:\"hr\",strong:\"strong\",ul:\"ul\",li:\"li\"},t.components),{Image:r,IntroParagraph:s}=n;return r||l(\"Image\",!0),s||l(\"IntroParagraph\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(r,{title:\"Layout tools image\",src:\"/social.jpg\",size:\"hero\",height:150,width:900}),`\n`,(0,e.jsx)(s,{children:(0,e.jsx)(n.p,{children:`Tamagui is a style system with an optimizing compiler that allows for sharing 50% more code\nbetween web and native apps, while increasing - rather than decreasing - performance, native-feel,\nand ease of development.`})}),`\n`,(0,e.jsx)(n.p,{children:\"It's been six months since the Tamagui beta and almost exactly a year since alpha. And incredibly, the difference between 1.0 and the beta is even bigger than the already massive beta release.\"}),`\n`,(0,e.jsx)(n.p,{children:\"There's simply so much to cover.\"}),`\n`,(0,e.jsx)(n.p,{children:\"What's new?\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"For this release, I'll be splitting into sections features added in \",(0,e.jsx)(n.code,{children:\"core\"}),\" (the style system), \",(0,e.jsx)(n.code,{children:\"static\"}),\" (the optimizing compiler), and \",(0,e.jsx)(n.code,{children:\"tamagui\"}),\" (the UI kit).\"]}),`\n`,(0,e.jsx)(n.h2,{id:\"whats-new-in-core\",children:\"What's new in Core\"}),`\n`,(0,e.jsx)(n.p,{children:\"It's all about maturity. Core has had over 500 bugs fixed, performance and memory usage improvements, and updates to compatibility with the latest and greatest in React and React Native.\"}),`\n`,(0,e.jsx)(n.h3,{id:\"react-069-react-18-react-native-web-18\",children:\"React 0.69, React 18, React Native Web 18\"}),`\n`,(0,e.jsx)(n.p,{children:\"Across all of Tamagui, we've bumped support to the latest versions.\"}),`\n`,(0,e.jsx)(n.h3,{id:\"correctness-bugs-performance\",children:\"Correctness, bugs, performance\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"More than any area, \",(0,e.jsx)(n.code,{children:\"core\"}),\" has matured the most. One of the first big steps was to separate it entirely from \",(0,e.jsx)(n.code,{children:\"react-native-web\"}),\". Before 1.0, we had to run a patch to \",(0,e.jsx)(n.code,{children:\"react-native-web\"}),\" that allowed us to pass in \",(0,e.jsx)(n.code,{children:\"className\"}),\", and also re-use some of the internal atomic CSS generation to avoid duplicating functionality (and therefore bundle size).\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Fixing this was a many-step process, but it was helped when profiling and analysis of the \",(0,e.jsx)(n.code,{children:\"react-native-web\"}),\" style system showed that there were large performance cliffs in a variety of areas of their CSS generation steps. Namely, the design of the entire setup was a highly functional plugin system. This led to up to O(N^3) performance (up to 3 loops iterating one inside of the other over style props) and a large number of total loops, plus high memory usage with many objects being created. Because Tamagui was built on top of this, we further compounded the problem with a few loops of our own.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"During the early betas this became a priority. We accepted a temporary bundle size increase by essentially copying in the relevant bits of the \",(0,e.jsx)(n.code,{children:\"react-native-web\"}),\" style system, and then slowly began the process of refactoring and inlining the logic into our own already fairly well-optimized single pass over styles.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Today, the style system is now a lot closer to ideal. We've removed almost all the nested looping, and generate most styles in one pass.\"}),`\n`,(0,e.jsxs)(n.h3,{id:\"styled-upgrades\",children:[(0,e.jsx)(n.code,{children:\"styled\"}),\" upgrades\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.code,{children:\"styled\"}),\" factory has undergone a number of improvements. It now supports wrapping just about any component you give it, so long as that component accepts a \",(0,e.jsx)(n.code,{children:\"style\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(n.h4,{id:\"a-note-on-styled-types\",children:[\"A note on \",(0,e.jsx)(n.code,{children:\"styled\"}),\" types\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"We now recommend using \",(0,e.jsx)(n.code,{children:\"as const\"}),\" after your \",(0,e.jsx)(n.code,{children:\"variants\"}),\" object definition to fix some tricky issues related to some \",(0,e.jsx)(n.a,{href:\"\",children:\"outstanding Typescript limitations around inferring const generics\"}),\".\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"fonts\",children:\"Fonts\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"One theme in the betas for \",(0,e.jsx)(n.code,{children:\"core\"}),\" was upgrading how fonts worked. Two big helpers landed:\"]}),`\n`,(0,e.jsx)(n.h4,{id:\"fontlanguage-\",children:\"<FontLanguage />\"}),`\n`,(0,e.jsxs)(n.h4,{id:\"the-fontfacebyweight-config\",children:[\"The \",(0,e.jsx)(n.code,{children:\"fontFaceByWeight\"}),\" config\"]}),`\n`,(0,e.jsxs)(n.h3,{id:\"the-themeshallow-prop\",children:[\"The \",(0,e.jsx)(n.code,{children:\"themeShallow\"}),\" prop\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"helpers\",children:\"Helpers\"}),`\n`,(0,e.jsxs)(n.h3,{id:\"the-loadtheme-and-updatetheme-helpers\",children:[\"The \",(0,e.jsx)(n.code,{children:\"loadTheme\"}),\" and \",(0,e.jsx)(n.code,{children:\"updateTheme\"}),\" helpers\"]}),`\n`,(0,e.jsxs)(n.h3,{id:\"the-usemediapropsactive-hook\",children:[\"The \",(0,e.jsx)(n.code,{children:\"useMediaPropsActive\"}),\" hook\"]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{id:\"static\",children:\"Static\"}),`\n`,(0,e.jsx)(n.p,{children:\"Over a dozen major improvements to the compiler have made their way in since beta. Some of the highlights are:\"}),`\n`,(0,e.jsx)(n.h4,{id:\"up-front-bundling-of-components-and-config\",children:\"Up-front bundling of components and config\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Tamagui now fully bundles your \",(0,e.jsx)(n.code,{children:\"components\"}),\" and \",(0,e.jsx)(n.code,{children:\"config\"}),\" that you provide it before it begins compilation, writing them out into the \",(0,e.jsx)(n.code,{children:\"./dist/tamagui\"}),\" directory in your app. This is much better for debugging and introspection, and in the process we fixed a large variety of issues.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"The compiler now also supports analyzing components outside of your design system, allowing for even less friction when writing apps. Previously, Tamagui only knew how to optimize components found in your separated design system package. But it's common to have one-off \",(0,e.jsx)(n.code,{children:\"styled\"}),\" component you use just for small pieces of your app, that don't need to be inside your design system. With beta [...] we added a bigger feature, in which the compiler now attempts to load and analyze components inline as it discovers new ones. This led to a 25% increase in compile-time optimized components in our largest production Tamagui apps.\"]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{id:\"tamagui\",children:\"Tamagui\"}),`\n`,(0,e.jsx)(n.h3,{id:\"a-whole-lot-of-new-components-\",children:\"A whole lot of new components \\u{1F381}\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"With the beta release, we had mostly finalized the core feature set we wanted in Tamagui, especially in \",(0,e.jsx)(n.code,{children:\"@tamagui/core\"}),\", the base style system that works underlies the compiler and UI kit. It was time to cut our teeth building out a suite of components to really test it out.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"As of 1.0, we've added seven new large components that cover some of the most complex use cases you find in any apps. Each comes with a \",(0,e.jsx)(n.strong,{children:\"Radix-like\"}),\" composable component API surface that allows for nearly total control over customization.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"And like every component in the \",(0,e.jsx)(n.code,{children:\"tamagui\"}),\" package, every new component is completely sizable, themable, and responsive using your design system tokens.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Let's dig in.\"}),`\n`,(0,e.jsx)(n.h4,{id:\"sheet\",children:\"Sheet\"}),`\n`,(0,e.jsx)(n.p,{children:\"A decent bottom sheet is essential for any UI kit, but it represents one of the hardest components to build due to the need for complex interactive behavior at high performance, alongside delicate interplat between the outer draggable sheet and any inner scrollable content.\"}),`\n`,(0,e.jsx)(n.p,{children:\"This is made especially tricky because Tamagui allows for pluggable drivers. So, where normally you'd implement your interactivity once, the Tamagui UI kit\"}),`\n`,(0,e.jsx)(n.h4,{id:\"select\",children:\"Select\"}),`\n`,(0,e.jsx)(n.h4,{id:\"dialog\",children:\"Dialog\"}),`\n`,(0,e.jsx)(n.h4,{id:\"alertdialog\",children:\"AlertDialog\"}),`\n`,(0,e.jsx)(n.h4,{id:\"slider\",children:\"Slider\"}),`\n`,(0,e.jsx)(n.h4,{id:\"label\",children:\"Label\"}),`\n`,(0,e.jsx)(n.h4,{id:\"card\",children:\"Card\"}),`\n`,(0,e.jsx)(n.h4,{id:\"listitem\",children:\"ListItem\"}),`\n`,(0,e.jsx)(n.h4,{id:\"avatar\",children:\"Avatar\"}),`\n`,(0,e.jsx)(n.h4,{id:\"spinner\",children:\"Spinner\"}),`\n`,(0,e.jsx)(n.h4,{id:\"progress\",children:\"Progress\"}),`\n`,(0,e.jsx)(n.h4,{id:\"unspaced\",children:\"Unspaced\"}),`\n`,(0,e.jsx)(n.h4,{id:\"scrollview\",children:\"ScrollView\"}),`\n`,(0,e.jsx)(n.p,{children:\"Label has been updated to work with all the new form inputs.\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"the-kitchen-sink\",children:\"The Kitchen Sink\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"react-native-animation-driver\",children:\"React Native Animation Driver\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"performance\",children:\"Performance\"}),`\n`,(0,e.jsx)(n.p,{children:\"Focus on performance has been a big overarching theme of the beta releases. We've sped up the compiler by about 2x, and the runtime likewise has had an ongoing series of patches that in local tests speed up common use cases likewise by 2-3x.\"}),`\n`,(0,e.jsx)(n.p,{children:\"This is a result of many small changes. For example, on the frontend we changed our style strategy which took extensive refactoring in three stages:\"}),`\n`,(0,e.jsx)(n.p,{children:\"We started with entirely relying on React Native Web's internal style engine, but found it was a big bottleneck both to our correctness, and speed. We instead forked their style system internally, and then step by step went about merging it into our own.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Today the style loop now does 3^N less loops over styles than vanilla React Native.\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"community\",children:\"Community\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Sponsors\"}),`\n`,(0,e.jsx)(n.li,{children:\"Community page\"}),`\n`,(0,e.jsx)(n.li,{children:\"Figma\"}),`\n`,(0,e.jsx)(n.li,{children:\"Discord\"}),`\n`,(0,e.jsx)(n.li,{children:\"Starter repos\"}),`\n`]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"ssr\",children:\"SSR\"}),`\n`,(0,e.jsx)(n.p,{children:\"Tamagui is the only UI kit that works on both React Native and React Native Web today that supports SSR across every feature and components, right out of the box. During the beta we landed a wide variety of correctness fixes for this functionality.\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"vite-plugin--vite-compiler\",children:\"Vite Plugin + Vite Compiler\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"react-server-components\",children:\"React Server Components\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"react-native-web-lite\",children:\"react-native-web-lite\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"concurrent-mode-support\",children:\"Concurrent Mode Support\"}),`\n`,(0,e.jsx)(n.p,{children:\"(ties into react-native-web-lite)\"}),`\n`,(0,e.jsx)(n.p,{children:\"We've updated Tamagui's base React version to be 18, and landed a large amount of fixes relating to concurrent mode.\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"react-native-svg-lite\",children:\"react-native-svg-lite\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"tamaguinext-theme\",children:(0,e.jsx)(n.code,{children:\"@tamagui/next-theme\"})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsxs)(n.h3,{id:\"tamaguitheme-base-upgrades\",children:[(0,e.jsx)(n.code,{children:\"@tamagui/theme-base\"}),\" upgrades\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"The default theme package now includes \",(0,e.jsx)(n.code,{children:\"_active\"}),\" sub-themes, paving the way for a consistent way to style all active states across every component in \",(0,e.jsx)(n.code,{children:\"tamagui\"}),\".\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"It also now includes theme values for \",(0,e.jsx)(n.code,{children:\"color1\"}),\" => \",(0,e.jsx)(n.code,{children:\"color12\"}),\" as part of each theme. This gives you granular access outside of the more specific color values like \",(0,e.jsx)(n.code,{children:\"background\"}),\", or \",(0,e.jsx)(n.code,{children:\"borderColor\"}),\".\"]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"starter-repos\",children:\"Starter repos\"}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"create-tamagui-app\"}),\" underwent some big improvements that will set it up to be much more useful going forward. We moved official starters to be part of the actual Tamagui monorepo itself, which lets us much more rapidly iterate on them, and more importantly, to have them integrated into CI and tested before each release.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"It also now leverages a custom home directory \",(0,e.jsx)(n.code,{children:\"~/.tamagui\"}),\" directory that will keep track of the last version you used in each app. In the future we can use this to give you automatic upgrade help, and diffs of changes you'll want to make.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.code,{children:\"next-expo-solito\"}),\" starter repo has had extensive polish as well, with fixes for using Expo EAS out of the box.\"]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"correctness\",children:\"Correctness\"}),`\n`,(0,e.jsx)(n.p,{children:\"More than any other section in this release, the biggest amount of effort for 1.0 went into correctness. Nearly every day, Tamagui has steadily landed fixes across every feature and component.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Speaking personally, I'm most proud of the gains made here. The components introduced before the beta were ambitious, and they continued at a rapid pace during beta.\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"documentation\",children:\"Documentation\"}),`\n`,(0,e.jsx)(n.p,{children:\"The docs have undergone continuous improvements. Some highlights are:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"The \",(0,e.jsx)(n.a,{href:\"/docs/intro/compiler\",children:\"compiler now has an extensive article breaking down the whys and hows of how it works\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"testing\",children:\"Testing\"}),`\n`,(0,e.jsx)(n.p,{children:\"We've expanded our testing signficantly, with CI now passing on every merge into master and adding stricted linting and custom validation before every release.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"We now have a custom \",(0,e.jsx)(n.code,{children:\"release.ts\"}),\" script that controls our release process as well, ensuring releases are tightly coordinated and that starters are integration tested as part of CI.\"]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"benchmarks\",children:\"Benchmarks\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"apps-in-production\",children:\"Apps in production\"}),`\n`,(0,e.jsx)(n.p,{children:\"We now have multiple users deploying larger scale apps with Tamagui in production.\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"acknowledgements\",children:\"Acknowledgements\"}),`\n`,(0,e.jsx)(n.p,{children:\"This release once again is inspired by or forks code from a variety of other libraries and developers.\"}),`\n`,(0,e.jsx)(n.p,{children:\"I'd like to thank:\"})]})}}var x=T;function l(t,i){throw new Error(\"Expected \"+(i?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return v(S);})();\n;return Component;","relatedPosts":null},"__N_SSG":true}