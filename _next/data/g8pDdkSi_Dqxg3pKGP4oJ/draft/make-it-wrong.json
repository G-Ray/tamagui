{"pageProps":{"frontmatter":{"title":"Make it wrong","publishedAt":"2021-02-22","description":"A better base layer for building cross-platform apps","by":"nate","slug":"make-it-wrong","readingTime":{"text":"4 min read","minutes":3.275,"time":196500,"words":655}},"code":"var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var p=(a,i)=>()=>(i||a((i={exports:{}}).exports,i),i.exports),g=(a,i)=>{for(var n in i)o(a,n,{get:i[n],enumerable:!0})},s=(a,i,n,t)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let r of m(i))!f.call(a,r)&&r!==n&&o(a,r,{get:()=>i[r],enumerable:!(t=c(i,r))||t.enumerable});return a};var w=(a,i,n)=>(n=a!=null?h(u(a)):{},s(i||!a||!a.__esModule?o(n,\"default\",{value:a,enumerable:!0}):n,a)),b=a=>s(o({},\"__esModule\",{value:!0}),a);var d=p((j,l)=>{l.exports=_jsx_runtime});var M={};g(M,{default:()=>I,frontmatter:()=>y});var e=w(d()),y={title:\"Make it wrong\",publishedAt:\"2021-02-22\",description:\"A better base layer for building cross-platform apps\",by:\"nate\"};function k(a={}){let{wrapper:i}=a.components||{};return i?(0,e.jsx)(i,Object.assign({},a,{children:(0,e.jsx)(n,{})})):n();function n(){let t=Object.assign({p:\"p\",a:\"a\",blockquote:\"blockquote\",em:\"em\",strong:\"strong\",h2:\"h2\",h3:\"h3\",ol:\"ol\",li:\"li\"},a.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(t.p,{children:['I keep coming back to the mantra \"',(0,e.jsx)(t.a,{href:\"https://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast\",children:\"Make it work, make it right, make it fast\"}),`\" (lets abbreviate that to MW-MR-MF). One of the main pitches of Tamagui is performance, and in building it I've come to a less catchy but truer formulation:`]}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsx)(t.p,{children:\"Never add a feature that can't be fast - but always make it right first.\"}),`\n`]}),`\n`,(0,e.jsxs)(t.p,{children:[\"The basics idea of MW-MR-MF is easy enough. It basically wants to save you a lot of wasted dev time - if you don't get your program right \",(0,e.jsx)(t.em,{children:\"first\"}),\", you'll never know if your performance work is even valid. You'll waste time with regressions and edge cases you never considered, and may even end up at a dead end altogether.\"]}),`\n`,(0,e.jsx)(t.p,{children:\"This is true. I know it because I've ended up there. But MW-MR-MF doesn't avoid all dead ends, in fact doing so can lead you to a very different type of dead-end:\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Making it right without performance in mind can make performance impossible\"}),\".\"]}),`\n`,(0,e.jsx)(t.h2,{id:\"think-it-fast-first\",children:\"Think it fast first\"}),`\n`,(0,e.jsx)(t.p,{children:\"If you're lucky, making a program fast after you get it right is just a matter of refactoring. But that's not always the case.\"}),`\n`,(0,e.jsx)(t.p,{children:\"Tamagui uses an optimizing compiler to be fast. But it's not my first one. The UI kit I built before Tamagui (that was never released) largely looked and felt like Tamagui, but it ended in disaster.\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"I followed MW-MR-MF. In fact, the fast part came far into the development of the kit, after quite a few really handy features had made their way in. But the problem was that \",(0,e.jsx)(t.em,{children:\"because of those features\"}),\" \",(0,e.jsx)(t.strong,{children:\"it was impossible to make it fast\"}),\".\"]}),`\n`,(0,e.jsx)(t.p,{children:\"The problems were numerous, but can be summarized as follows: dynamism that couldn't be captured at compile time.\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"It was weeks into trying to fix some subtle issues with the compiler that I realized the only way I could fix them (due to the nightmarish \",(0,e.jsx)(t.em,{children:\"cascading\"}),\" part of \",(0,e.jsx)(t.em,{children:\"Cascading Style Sheets\"}),\") was to rewrite the outputted classnames entirely to be \",(0,e.jsx)(t.a,{href:\"https://css-tricks.com/lets-define-exactly-atomic-css/\",children:\"atomic\"}),\".\"]}),`\n`,(0,e.jsx)(t.p,{children:\"So, I tried. I had the tests and a large app to run integration on. I mapped out the solution, and I dove in to the refactor.\"}),`\n`,(0,e.jsx)(t.p,{children:\"Nearly a month later, I gave up. Not just on the refactor, but the UI kit itself. It simply couldn't be made fast as it was.\"}),`\n`,(0,e.jsx)(t.p,{children:'With some \"small\" changes to the featureset, it would work. But those small changes trickled up to everthing, to the point where it essentially would be a total rewrite.'}),`\n`,(0,e.jsx)(t.h3,{id:\"follow-the-mantra-in-smaller-steps\",children:\"Follow the mantra, in smaller steps\"}),`\n`,(0,e.jsx)(t.p,{children:\"After a few months of burn-out, I started back on a new project. I didn't copy a line of code from the old UI kit, despite it being massive and really beautifully made in most areas. I wanted to build a new UI kit for this project, but this time with a different core focus - I wanted it to work on React Native as well as web.\"}),`\n`,(0,e.jsx)(t.p,{children:\"And this time, I knew it needed to be designed for compilation from the start.\"}),`\n`,(0,e.jsx)(t.p,{children:\"I started with the compiler. It evolved alongside the featureset. Every feature needed was first scoped out through the lens of the compiler.\"}),`\n`,(0,e.jsxs)(t.p,{children:['The \"right\" part ',(0,e.jsx)(t.em,{children:\"was\"}),\" the performance. That's basically true for all libraries that want to be popular. If you're building software without caring about performance, you're failing your users, and someone else won't.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"So make it right first with speed in mind. With the smallest surface area possible. Validate at the least \",(0,e.jsx)(t.em,{children:\"can\"}),\" be optimized technically, but ideally just make it fast. Only then, add more features. In other words, it's a loop:\"]}),`\n`,(0,e.jsxs)(t.ol,{children:[`\n`,(0,e.jsx)(t.li,{children:\"Make it (the smallest possible feature) work\"}),`\n`,(0,e.jsx)(t.li,{children:\"Make it right\"}),`\n`,(0,e.jsx)(t.li,{children:\"Make it fast\"}),`\n`,(0,e.jsx)(t.li,{children:\"Return to step 1\"}),`\n`]})]})}}var I=k;return b(M);})();\n;return Component;","relatedPosts":null},"__N_SSG":true}